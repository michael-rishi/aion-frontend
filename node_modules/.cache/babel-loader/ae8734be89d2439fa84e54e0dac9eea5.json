{"ast":null,"code":"/*\n\nThese are used as defaults usually if the API consumer does not provide their\nown. For security purposes someone should at some point inspect the default\nvalues.\n\n*/\nvar values = Object.freeze({\n  //\n  // used in many places to add or remove this value\n  //\n  zeroX: '0x',\n  //\n  // eth-lib/nat\n  // whatever that is it uses these values extensively\n  //\n  nat: {\n    zero: '0x0',\n    one: '0x1'\n  },\n  //\n  // utils.toHex\n  // randomHex\n  //\n  hex: {\n    zero: '0x00',\n    one: '0x01',\n    // used for creating accounts\n    // 32 bytes was used for the eth module\n    // SECURITY: is this secure enough?\n    randomHexSize: 32\n  },\n  //\n  // Aion solidity\n  //\n  maxIntSize: 128,\n  rpc: {\n    url: 'http://127.0.0.1:8545'\n  },\n  addresses: {\n    // addresses start with 0xAO identifier\n    identifier: new Buffer('a0', 'hex'),\n    // without 0x\n    nonNumericLength: 64,\n    // with 0x\n    numericLength: 66,\n    bytesLength: 32\n  },\n  //\n  // crypto defaults\n  // mostly taken from ethereum web3\n  // SECURITY: should have a look some time\n  //\n  crypto: {\n    saltLength: 32,\n    ivLength: 16,\n    kdf: 'script',\n    dklen: 32,\n    pbkdf2: {\n      c: 262144,\n      prf: 'hmac-sha256',\n      digest: 'sha256'\n    },\n    scrypt: {\n      n: 8192,\n      r: 8,\n      p: 2\n    },\n    cipherIvAlgorithm: 'aes-128-ctr',\n    uuidRandomBytes: 16\n  },\n  //\n  // solidity types\n  //\n  solidity: {\n    //\n    // utils.solidityPack\n    //\n    pack: {\n      zero: '00',\n      one: '01'\n    },\n    dimensionStartChar: '[',\n    dimensionEndChar: ']',\n    dimensionsDynamic: '[]',\n\n    /*\n     solidity type-specific information\n     */\n    types: {\n      function: {\n        // encoded(hashed) signature is short\n        byteLengthEncoded: 4,\n        bytelength: 16\n      },\n      bool: {\n        pad: 'left',\n        byteLength: 16,\n        stringLength: 32,\n        zero: '00000000000000000000000000000000',\n        one: '00000000000000000000000000000001'\n      },\n      uint: {\n        pad: 'left',\n        byteLength: 16,\n        stringLength: 32,\n        numeric: true\n      },\n      int: {\n        pad: 'left',\n        byteLength: 16,\n        stringLength: 32,\n        numeric: true\n      },\n      fixed: {\n        pad: 'left',\n        byteLength: 16,\n        stringLength: 32,\n        numeric: true\n      },\n      ufixed: {\n        pad: 'left',\n        byteLength: 16,\n        stringLength: 32,\n        numeric: true\n      },\n      address: {\n        // acts as uint256\n        // the only exception\n        pad: 'left',\n        byteLength: 32,\n        stringLength: 64\n      },\n      bytes: {\n        pad: 'right',\n        dynamic: true,\n        byteLength: 32,\n        stringLength: 64\n      },\n      string: {\n        pad: 'right',\n        dynamic: true,\n        byteLength: 32,\n        stringLength: 64\n      }\n    },\n    numericTypes: ['uint', 'int', 'fixed', 'ufixed']\n  }\n});\nmodule.exports = values;","map":null,"metadata":{},"sourceType":"script"}