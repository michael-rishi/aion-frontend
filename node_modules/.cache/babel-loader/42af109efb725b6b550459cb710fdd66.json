{"ast":null,"code":"/*\n * Copyright (c) 2017-2018 Aion foundation.\n *\n *     This file is part of the aion network project.\n *\n *     The aion network project is free software: you can redistribute it \n *     and/or modify it under the terms of the GNU General Public License \n *     as published by the Free Software Foundation, either version 3 of \n *     the License, or any later version.\n *\n *     The aion network project is distributed in the hope that it will \n *     be useful, but WITHOUT ANY WARRANTY; without even the implied \n *     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n *     See the GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with the aion network project source files.  \n *     If not, see <https://www.gnu.org/licenses/>.\n *\n * Contributors:\n *     Aion foundation.\n *     Marek Kotewicz <marek@parity.io>\n *     Fabian Vogelsteller <fabian@frozeman.de>\n */\nvar _ = require('underscore');\n\nvar aionjsUnit = require('./aion-unit.js');\n\nvar utils = require('./utils.js');\n\nvar solidityBlake2b256 = require('./solidityBlake2b256.js');\n\nvar randomHex = require('randomhex');\n\nvar aionLib = require('aion-lib');\n/**\n * Fires an error in an event emitter and callback and returns the eventemitter\n *\n * @method _fireError\n * @param {Object} error a string, a error, or an object with {message, data}\n * @param {Object} emitter\n * @param {Function} reject\n * @param {Function} callback\n * @return {Object} the emitter\n */\n\n\nvar _fireError = function _fireError(error, emitter, reject, callback) {\n  /*jshint maxcomplexity: 10 */\n  // add data if given\n  if (_.isObject(error) && !(error instanceof Error) && error.data) {\n    if (_.isObject(error.data) || _.isArray(error.data)) {\n      error.data = JSON.stringify(error.data, null, 2);\n    }\n\n    error = error.message + \"\\n\" + error.data;\n  }\n\n  if (_.isString(error)) {\n    error = new Error(error);\n  }\n\n  if (_.isFunction(callback)) {\n    callback(error);\n  }\n\n  if (_.isFunction(reject)) {\n    // suppress uncatched error if an error listener is present\n    // OR suppress uncatched error if an callback listener is present\n    if (emitter && _.isFunction(emitter.listeners) && emitter.listeners('error').length || _.isFunction(callback)) {\n      emitter.catch(function () {});\n    } // reject later, to be able to return emitter\n\n\n    setTimeout(function () {\n      reject(error);\n    }, 1);\n  }\n\n  if (emitter && _.isFunction(emitter.emit)) {\n    // emit later, to be able to return emitter\n    setTimeout(function () {\n      emitter.emit('error', error);\n      emitter.removeAllListeners();\n    }, 1);\n  }\n\n  return emitter;\n};\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method _jsonInterfaceMethodToString\n * @param {Object} json\n * @return {String} full function/event name\n */\n\n\nvar _jsonInterfaceMethodToString = function _jsonInterfaceMethodToString(json) {\n  if (_.isObject(json) && json.name && json.name.indexOf('(') !== -1) {\n    return json.name;\n  }\n\n  return json.name + '(' + _flattenTypes(false, json.inputs).join(',') + ')';\n};\n/**\n * Should be used to flatten json abi inputs/outputs into an array of type-representing-strings\n *\n * @method _flattenTypes\n * @param {bool} includeTuple\n * @param {Object} puts\n * @return {Array} parameters as strings\n */\n\n\nvar _flattenTypes = function _flattenTypes(includeTuple, puts) {\n  // console.log(\"entered _flattenTypes. inputs/outputs: \" + puts)\n  var types = [];\n  puts.forEach(function (param) {\n    if (typeof param.components === 'object') {\n      if (param.type.substring(0, 5) !== 'tuple') {\n        throw new Error('components found but type is not tuple; report on GitHub');\n      }\n\n      var suffix = '';\n      var arrayBracket = param.type.indexOf('[');\n\n      if (arrayBracket >= 0) {\n        suffix = param.type.substring(arrayBracket);\n      }\n\n      var result = _flattenTypes(includeTuple, param.components); // console.log(\"result should have things: \" + result)\n\n\n      if (_.isArray(result) && includeTuple) {\n        // console.log(\"include tuple word, and its an array. joining...: \" + result.types)\n        types.push('tuple(' + result.join(',') + ')' + suffix);\n      } else if (!includeTuple) {\n        // console.log(\"don't include tuple, but its an array. joining...: \" + result)\n        types.push('(' + result.join(',') + ')' + suffix);\n      } else {\n        // console.log(\"its a single type within a tuple: \" + result.types)\n        types.push('(' + result + ')');\n      }\n    } else {\n      // console.log(\"its a type and not directly in a tuple: \" + param.type)\n      types.push(param.type);\n    }\n  });\n  return types;\n};\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method hexToAscii\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\n\n\nvar hexToAscii = function hexToAscii(hex) {\n  if (!utils.isHexStrict(hex)) throw new Error('The parameter must be a valid HEX string.');\n  var str = \"\";\n  var i = 0,\n      l = hex.length;\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n\n  return str;\n};\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method asciiToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\n\n\nvar asciiToHex = function asciiToHex(str) {\n  if (!str) return \"0x00\";\n  var hex = \"\";\n\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i);\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n  }\n\n  return \"0x\" + hex;\n};\n/**\n * Returns value of unit in nAmp\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default aion\n * @returns {BN} value of the unit (in nAmp)\n * @throws error if the unit is not correct:w\n */\n\n\nvar getUnitValue = function getUnitValue(unit) {\n  unit = unit ? unit.toLowerCase() : 'aion';\n\n  if (!aionjsUnit.unitMap[unit]) {\n    throw new Error('This unit \"' + unit + '\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(aionjsUnit.unitMap, null, 2));\n  }\n\n  return unit;\n};\n/**\n * Takes a number of nAmp and converts it to any other aion unit.\n *\n * Possible units are:\n *   SI Short   SI Full        \n * - namp       uaion    \n * - uamp       maion      \n * - mamp       caion  \n * - amp        daion\n * -            aion\n *\n *              \n * @method fromNAmp\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default aion\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\n\n\nvar fromNAmp = function fromNAmp(number, unit) {\n  unit = getUnitValue(unit);\n\n  if (!utils.isBN(number) && !_.isString(number)) {\n    throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n  }\n\n  return utils.isBN(number) ? aionjsUnit.fromNAmp(number, unit) : aionjsUnit.fromNAmp(number, unit).toString(10);\n};\n/**\n * Takes a number of a unit and converts it to nAmp.\n *\n * Possible units are:\n *   SI Short   SI Full        \n * - namp       uaion    \n * - uamp       maion      \n * - mamp       caion  \n * - amp        daion\n * -            aion\n *\n * @method toNAmp\n * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default aion\n * @return {String|Object} When given a BN object it returns one as well, otherwise a number\n */\n\n\nvar toNAmp = function toNAmp(number, unit) {\n  unit = getUnitValue(unit);\n\n  if (!utils.isBN(number) && !_.isString(number)) {\n    throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n  }\n\n  return utils.isBN(number) ? aionjsUnit.toNAmp(number, unit) : aionjsUnit.toNAmp(number, unit).toString(10);\n};\n/**\n * Converts to a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @return {String}\n */\n\n\nvar toChecksumAddress = function toChecksumAddress(address) {\n  if (typeof address === 'undefined') return '';\n  if (!/^(0x)?[0-9a-f]{64}$/i.test(address)) throw new Error('Given address \"' + address + '\" is not a valid Aion address.');\n  return aionLib.accounts.createChecksumAddress(address);\n};\n\nmodule.exports = {\n  _fireError: _fireError,\n  _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,\n  _flattenTypes: _flattenTypes,\n  // extractDisplayName: extractDisplayName,\n  // extractTypeName: extractTypeName,\n  randomHex: randomHex,\n  _: _,\n  BN: utils.BN,\n  isBN: utils.isBN,\n  isBigNumber: utils.isBigNumber,\n  isHex: utils.isHex,\n  isHexStrict: utils.isHexStrict,\n  blake2b256: utils.blake2b256,\n  sha3: utils.sha3,\n  keccak256: utils.sha3,\n  solidityBlake2b256: solidityBlake2b256,\n  isAddress: utils.isAddress,\n  checkAddressChecksum: utils.checkAddressChecksum,\n  toChecksumAddress: toChecksumAddress,\n  toHex: utils.toHex,\n  toBN: utils.toBN,\n  bytesToHex: utils.bytesToHex,\n  hexToBytes: utils.hexToBytes,\n  hexToNumberString: utils.hexToNumberString,\n  hexToNumber: utils.hexToNumber,\n  toDecimal: utils.hexToNumber,\n  // alias\n  numberToHex: utils.numberToHex,\n  fromDecimal: utils.numberToHex,\n  // alias\n  hexToUtf8: utils.hexToUtf8,\n  hexToString: utils.hexToUtf8,\n  toUtf8: utils.hexToUtf8,\n  utf8ToHex: utils.utf8ToHex,\n  stringToHex: utils.utf8ToHex,\n  fromUtf8: utils.utf8ToHex,\n  hexToAscii: hexToAscii,\n  toAscii: hexToAscii,\n  asciiToHex: asciiToHex,\n  fromAscii: asciiToHex,\n  unitMap: aionjsUnit.unitMap,\n  toNAmp: toNAmp,\n  fromNAmp: fromNAmp,\n  padLeft: utils.leftPad,\n  leftPad: utils.leftPad,\n  padRight: utils.rightPad,\n  rightPad: utils.rightPad,\n  toTwosComplement: utils.toTwosComplement\n};","map":null,"metadata":{},"sourceType":"script"}