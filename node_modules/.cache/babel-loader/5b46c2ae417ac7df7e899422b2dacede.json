{"ast":null,"code":"var _require = require('underscore'),\n    isArray = _require.isArray;\n\nvar patterns = require('./patterns');\n\nvar values = require('./values');\n/**\n * Parse the solidity type and give relevant information such is dimensions\n * @param {string} val\n * @return {object}\n */\n\n\nfunction parseType(val) {\n  var baseType = patterns.solidityTypeNoLength.exec(val);\n  var bitLength = patterns.typeN.exec(val);\n  var dimensions = val.match(patterns.solidityDimensions);\n  var hasDimensions;\n  var hasDynamicDimensions;\n\n  if (baseType !== null) {\n    baseType = baseType[1];\n  }\n\n  if (bitLength !== null) {\n    bitLength = parseInt(bitLength[1], 10);\n  } // bytes and string are dynamic\n\n\n  if (dimensions !== null) {\n    dimensions = dimensions.map(function (item) {\n      var op = {};\n      var digit = item.match(patterns.solidityDimensionDigit); // having [] is dynamic\n\n      op.dynamic = item === values.solidity.dimensionsDynamic; // otherwise the user specified a fixed length\n\n      if (digit !== null) {\n        op.length = parseInt(digit[0], 10);\n      }\n\n      return op;\n    });\n  } // has [] or [6] or [][2]\n\n\n  hasDimensions = isArray(dimensions) === true; // has [] or [][]\n\n  hasDynamicDimensions = hasDimensions === true && isArray(dimensions) === true && dimensions.some(function (item) {\n    return item.dynamic === true;\n  });\n  return {\n    baseType: baseType,\n    bitLength: bitLength,\n    dimensions: dimensions,\n    hasDimensions: hasDimensions,\n    hasDynamicDimensions: hasDynamicDimensions\n  };\n}\n\nmodule.exports = {\n  parseType: parseType\n};","map":null,"metadata":{},"sourceType":"script"}