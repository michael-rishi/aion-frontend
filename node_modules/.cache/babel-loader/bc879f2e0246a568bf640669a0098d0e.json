{"ast":null,"code":"var patterns = Object.freeze({\n  // starts with '0x'\n  zeroX: /^0x/i,\n  // starts with 0x or -0x\n  // zeroXNegative: /^(-)?0x/i,\n  zeroXNegative: /^-0x/i,\n  // positive or negative hex with optional 0x\n  hex: /^(-0x|0x)?[0-9a-f]{1,}$/i,\n  // positive or negative hex with 0x\n  hexStrict: /^(-)?0x[0-9a-f]{1,}$/i,\n  // aion-specific 0x0a\n  // 0xa0 some addresses arent 0xa0 yet\n  // address: /^(0x)?a0[0-9a-f]{62}$/i,\n  address: /^(0x)?[0-9a-f]{64}$/i,\n  // starts with utf8 null characters\n  utf8Null: /^(?:\\u0000)*/,\n  // eslint-disable-line no-control-regex\n  // matches solidity array types int128[64] or uint128[32]\n  // captures array length\n  typeNArray: /^\\D{3,}(?:\\d{1,})?\\[(\\d+)\\]$/,\n  // match int128 or uint128\n  // captures byte size\n  typeN: /^\\D+(\\d+).*$/,\n  // if you have `unit128` just get `uint`\n  solidityTypeNoLength: /^([a-z]{3,})/,\n  // get [8] or []\n  solidityDimensions: /(\\[(\\d{1,})\\]|\\[\\])/g,\n  // get the 8 from [8]\n  solidityDimensionDigit: /\\d{1,}/,\n  // matches left-padded hex strings like 0000000FF\n  leadingHexZeroPadding: /^(?:00)*/,\n  // similar to typeNArray but just captures array length\n  arraySizeDigit: /(?:\\[)(\\d+)/,\n  // used to check against IBAN addresses ../iban.js\n  validIban: /^XE[0-9]{2}(AIO[0-9A-Z]{13}|[0-9A-Z]{30,31})$/\n});\nmodule.exports = patterns;","map":null,"metadata":{},"sourceType":"script"}