{"ast":null,"code":"var BN = require('bn.js');\n\nvar numberToBN = require('number-to-bn');\n\nvar zero = new BN(0);\nvar negative1 = new BN(-1); // complete aion unit map\n\nvar unitMap = {\n  'namp': '1',\n  // eslint-disable-line\n  'uamp': '1000',\n  // eslint-disable-line\n  'mamp': '1000000',\n  // eslint-disable-line\n  'amp': '1000000000',\n  // eslint-disable-line\n  'uaion': '1000000000000',\n  // eslint-disable-line\n  'maion': '1000000000000000',\n  // eslint-disable-line\n  'caion': '10000000000000000',\n  // eslint-disable-line\n  'daion': '100000000000000000',\n  // eslint-disable-line\n  'aion': '1000000000000000000' // eslint-disable-line\n\n};\n/**\n * Returns value of unit in nAmp\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default aion\n * @returns {BigNumber} value of the unit (in uAmp)\n * @throws error if the unit is not correct:w\n */\n\nfunction getValueOfUnit(unitInput) {\n  var unit = unitInput ? unitInput.toLowerCase() : 'aion';\n  var unitValue = unitMap[unit]; // eslint-disable-line\n\n  if (typeof unitValue !== 'string') {\n    throw new Error(\"[aion-unit] the unit provided \".concat(unitInput, \" doesn't exists, please use the one of the following units \").concat(JSON.stringify(unitMap, null, 2)));\n  }\n\n  return new BN(unitValue, 10);\n}\n\nfunction numberToString(arg) {\n  if (typeof arg === 'string') {\n    if (!arg.match(/^-?[0-9.]+$/)) {\n      throw new Error(\"while converting number to string, invalid number value '\".concat(arg, \"', should be a number matching (^-?[0-9.]+).\"));\n    }\n\n    return arg;\n  } else if (typeof arg === 'number') {\n    return String(arg);\n  } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {\n    if (arg.toPrecision) {\n      return String(arg.toPrecision());\n    } else {\n      // eslint-disable-line\n      return arg.toString(10);\n    }\n  }\n\n  throw new Error(\"while converting number to string, invalid number value '\".concat(arg, \"' type \").concat(typeof arg, \".\"));\n}\n\nfunction fromNAmp(nAmpInput, unit, optionsInput) {\n  var nAmp = numberToBN(nAmpInput); // eslint-disable-line\n\n  var negative = nAmp.lt(zero); // eslint-disable-line\n\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1;\n  var options = optionsInput || {};\n\n  if (negative) {\n    nAmp = nAmp.mul(negative1);\n  }\n\n  var fraction = nAmp.mod(base).toString(10); // eslint-disable-line\n\n  while (fraction.length < baseLength) {\n    fraction = \"0\".concat(fraction);\n  }\n\n  if (!options.pad) {\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  }\n\n  var whole = nAmp.div(base).toString(10); // eslint-disable-line\n\n  if (options.commify) {\n    whole = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  var value = \"\".concat(whole).concat(fraction == '0' ? '' : \".\".concat(fraction)); // eslint-disable-line\n\n  if (negative) {\n    value = \"-\".concat(value);\n  }\n\n  return value;\n}\n\nfunction toNAmp(aionInput, unit) {\n  var aion = numberToString(aionInput); // eslint-disable-line\n\n  var base = getValueOfUnit(unit);\n  var baseLength = unitMap[unit].length - 1 || 1; // Is it negative?\n\n  var negative = aion.substring(0, 1) === '-'; // eslint-disable-line\n\n  if (negative) {\n    aion = aion.substring(1);\n  }\n\n  if (aion === '.') {\n    throw new Error(\"[aion-unit] while converting number \".concat(aionInput, \" to nAmp, invalid value\"));\n  } // Split it into a whole and fractional part\n\n\n  var comps = aion.split('.'); // eslint-disable-line\n\n  if (comps.length > 2) {\n    throw new Error(\"[aion-unit] while converting number \".concat(aionInput, \" to nAmp,  too many decimal points\"));\n  }\n\n  var whole = comps[0],\n      fraction = comps[1]; // eslint-disable-line\n\n  if (!whole) {\n    whole = '0';\n  }\n\n  if (!fraction) {\n    fraction = '0';\n  }\n\n  if (fraction.length > baseLength) {\n    throw new Error(\"[aion-unit] while converting number \".concat(aionInput, \" to nAmp, too many decimal places\"));\n  }\n\n  while (fraction.length < baseLength) {\n    fraction += '0';\n  }\n\n  whole = new BN(whole);\n  fraction = new BN(fraction);\n  var nAmp = whole.mul(base).add(fraction); // eslint-disable-line\n\n  if (negative) {\n    nAmp = nAmp.mul(negative1);\n  }\n\n  return new BN(nAmp.toString(10), 10);\n}\n\nmodule.exports = {\n  unitMap: unitMap,\n  numberToString: numberToString,\n  getValueOfUnit: getValueOfUnit,\n  fromNAmp: fromNAmp,\n  toNAmp: toNAmp\n};","map":null,"metadata":{},"sourceType":"script"}