{"ast":null,"code":"var randomHex = require('randomhex');\n\nvar numberToBn = require('number-to-bn');\n\nvar _require = require('underscore'),\n    isEmpty = _require.isEmpty,\n    isArray = _require.isArray,\n    isString = _require.isString,\n    isNumber = _require.isNumber;\n\nvar BN = require('bn.js');\n\nvar values = require('./values');\n\nvar patterns = require('./patterns');\n\nvar copyString = function copyString(val) {\n  return '' + val;\n};\n/**\n * True if string starts with '0x'\n * @param {string} val\n * @return {boolean}\n */\n\n\nvar startsWithZeroX = function startsWithZeroX(val) {\n  return isString(val) === true && patterns.zeroX.test(val) === true;\n};\n/**\n * Removes '0x' from a string\n * @param {string} val\n * @return {string} checkAddressChecksum\n */\n\n\nvar removeLeadingZeroX = function removeLeadingZeroX(val) {\n  return startsWithZeroX(val) === true ? val.replace(patterns.zeroX, '') : val;\n};\n/**\n * Put the 0x at the beginning of a string\n * @param {string} val\n * @return {string}\n */\n\n\nvar prependZeroX = function prependZeroX(val) {\n  return startsWithZeroX(val) === false ? values.zeroX + val : val;\n};\n/**\n * Strips '0x' and turns it into a Buffer\n * @param {string} val\n * @return {buffer}\n */\n\n\nvar hexToBuffer = function hexToBuffer(val) {\n  return toBuffer(val);\n};\n\nvar bufferToHex = function bufferToHex(val) {\n  return val.toString('hex');\n};\n\nvar bufferToZeroXHex = function bufferToZeroXHex(val) {\n  return prependZeroX(bufferToHex(val));\n};\n/**\n * Random Buffer of a size\n * @param {number} size\n * @return {buffer}\n */\n\n\nvar randomHexBuffer = function randomHexBuffer() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : values.hex.randomHexSize;\n  return hexToBuffer(removeLeadingZeroX(randomHex(size)));\n};\n/**\n * True if a string is hex\n * @param {string} val\n * @return {boolean}\n */\n\n\nvar isHex = function isHex(val) {\n  return isString(val) === true && patterns.hex.test(val) === true;\n};\n/**\n * True if two buffers have the same length and bytes\n * @param {buffer} buf1\n * @param {buffer} buf2\n * @return {boolean}\n */\n\n\nfunction equalBuffers(buf1, buf2) {\n  if (buf1.length !== buf2.length) {\n    return false;\n  }\n\n  return buf1.every(function (byte, index) {\n    return buf2[index] === byte;\n  });\n}\n/**\n * Gracefully try to convert anything into a buffer\n * @param {object} val anything\n * @param {string} encoding hex, utf8\n * @return {buffer}\n */\n\n\nfunction toBuffer(val, encoding) {\n  if (val === undefined || val === null) {\n    return Buffer.from([]);\n  } // buffer or array\n\n\n  if (isArray(val) === true || Buffer.isBuffer(val) === true) {\n    return Buffer.from(val);\n  }\n\n  if (isNumber(val) === true || BN.isBN(val) === true) {\n    // to array from BN is an array of bytes\n    return Buffer.from(numberToBn(val).toArray());\n  } // string\n\n\n  if (isString(val) === true && isEmpty(encoding) === true) {\n    // hex\n    if (startsWithZeroX(val) === true || isHex(val) === true) {\n      return Buffer.from(removeLeadingZeroX(val), 'hex');\n    }\n  } // anything else\n\n\n  return Buffer.from(val, encoding);\n}\n\nvar isBuffer = function isBuffer(val) {\n  return Buffer.isBuffer(val);\n};\n\nfunction toNumber(val) {\n  if (typeof val === 'number') {\n    return val;\n  }\n\n  if (isHex(val) === true) {\n    return new BN(removeLeadingZeroX(val), 'hex').toNumber();\n  }\n\n  if (BN.isBN(val) === true) {\n    return val.toNumber();\n  }\n\n  throw new Error(\"unknown format \\\"\".concat(typeof val, \"\\\" \").concat(val));\n}\n\nmodule.exports = {\n  copyString: copyString,\n  startsWithZeroX: startsWithZeroX,\n  removeLeadingZeroX: removeLeadingZeroX,\n  prependZeroX: prependZeroX,\n  hexToBuffer: hexToBuffer,\n  bufferToHex: bufferToHex,\n  bufferToZeroXHex: bufferToZeroXHex,\n  randomHexBuffer: randomHexBuffer,\n  Buffer: Buffer,\n  equalBuffers: equalBuffers,\n  toBuffer: toBuffer,\n  isBuffer: isBuffer,\n  isHex: isHex,\n  toNumber: toNumber\n};","map":null,"metadata":{},"sourceType":"script"}