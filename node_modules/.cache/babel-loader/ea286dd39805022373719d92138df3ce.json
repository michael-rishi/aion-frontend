{"ast":null,"code":"var assert = require('assert');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar BN = require('bn.js');\n\nvar JAVA_LONG_MAX = new BN('9223372036854775807');\nvar MASK = new BN('4294967295');\nvar INT_MASK = MASK; //* --- AION LONG --- */\n\nfunction AionLong(n) {\n  'use strict';\n\n  var _this = this;\n\n  if (!(_this instanceof AionLong)) {\n    // allow constructor call without new\n    return new AionLong(n);\n  }\n\n  if (n === null || typeof n === 'undefined' || !('toArray' in n)) {\n    throw new Error('unsupported input type');\n  }\n\n  if (new BN(n.toArray()).cmp(JAVA_LONG_MAX) > 0) {\n    throw new Error('violated upper bound');\n  }\n\n  this.buf = n.toArray();\n}\n\nAionLong.prototype._aionLong = true;\n\nAionLong.prototype.toArray = function () {\n  return this.buf;\n};\n\nAionLong.isAionLong = function (a) {\n  if (a instanceof AionLong) {\n    return true;\n  }\n\n  return a !== null && typeof a === 'object' && a._aionLong === true;\n};\n\nAionLong._aionEncodeLong = function (bn) {\n  var top = bn.shrn(32).and(MASK);\n  var bottom = bn.and(MASK);\n  var buf = Buffer.alloc(8);\n  buf.writeUInt32BE(top.toNumber(), 0);\n  buf.writeUInt32BE(bottom.toNumber(), 4);\n  return buf;\n};\n\nAionLong.aionEncodeLong = function (aionLong) {\n  var bn = new BN(aionLong.buf);\n\n  if (bn.and(INT_MASK).cmp(bn) === 0) {\n    return Buffer.from(bn.toArray());\n  } // otherwise this must be a long\n\n\n  return AionLong._aionEncodeLong(bn);\n};\n\nexports.AionLong = AionLong;\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n *\n * @param {Buffer,String,Integer,Array} data - will be converted to buffer\n * @returns {Buffer} - returns buffer of encoded data\n **/\n\nexports.encode = function (input) {\n  if (input instanceof Array) {\n    var output = [];\n\n    for (var i = 0; i < input.length; i++) {\n      output.push(exports.encode(input[i]));\n    }\n\n    var buf = Buffer.concat(output);\n    return Buffer.concat([encodeLength(buf.length, 192), buf]);\n  } else {\n    input = toBuffer(input);\n\n    if (input.length === 1 && input[0] < 128) {\n      return input;\n    } else {\n      return Buffer.concat([encodeLength(input.length, 128), input]);\n    }\n  }\n};\n\nfunction safeParseInt(v, base) {\n  if (v.slice(0, 2) === '00') {\n    throw new Error('invalid RLP: extra zeros');\n  }\n\n  return parseInt(v, base);\n}\n\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return Buffer.from([len + offset]);\n  } else {\n    var hexLength = intToHex(len);\n    var lLength = hexLength.length / 2;\n    var firstByte = intToHex(offset + 55 + lLength);\n    return Buffer.from(firstByte + hexLength, 'hex');\n  }\n}\n/**\n * RLP Decoding based on: {@link https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP|RLP}\n * @param {Buffer,String,Integer,Array} data - will be converted to buffer\n * @returns {Array} - returns decode Array of Buffers containg the original message\n **/\n\n\nexports.decode = function (input, stream) {\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n\n  input = toBuffer(input);\n\n  var decoded = _decode(input);\n\n  if (stream) {\n    return decoded;\n  }\n\n  assert.equal(decoded.remainder.length, 0, 'invalid remainder');\n  return decoded.data;\n};\n\nexports.getLength = function (input) {\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n\n  input = toBuffer(input);\n  var firstByte = input[0];\n\n  if (firstByte <= 0x7f) {\n    return input.length;\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f;\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6;\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf;\n  } else {\n    // a list  over 55 bytes long\n    var llength = firstByte - 0xf6;\n    var length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    return llength + length;\n  }\n};\n\nfunction _decode(input) {\n  var length, llength, data, innerRemainder, d;\n  var decoded = [];\n  var firstByte = input[0];\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f; // set 0x80 null to 0\n\n    if (firstByte === 0x80) {\n      data = Buffer.from([]);\n    } else {\n      data = input.slice(1, length);\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid rlp encoding: byte must be less 0x80');\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    llength = firstByte - 0xb6;\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    data = input.slice(llength, length + llength);\n\n    if (data.length < length) {\n      throw new Error('invalid RLP');\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = input.slice(1, length);\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    var totalLength = llength + length;\n\n    if (totalLength > input.length) {\n      throw new Error('invalid rlp: total length is larger than the data');\n    }\n\n    innerRemainder = input.slice(llength, totalLength);\n\n    if (innerRemainder.length === 0) {\n      throw new Error('invalid rlp, List has a invalid length');\n    }\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\n\nfunction isHexPrefixed(str) {\n  return str.slice(0, 2) === '0x';\n} // Removes 0x from a given String\n\n\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n\nfunction intToHex(i) {\n  var hex = i.toString(16);\n\n  if (hex.length % 2) {\n    hex = '0' + hex;\n  }\n\n  return hex;\n}\n\nfunction padToEven(a) {\n  if (a.length % 2) a = '0' + a;\n  return a;\n}\n\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n  return Buffer.from(hex, 'hex');\n}\n\nfunction toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (typeof v === 'string') {\n      if (isHexPrefixed(v)) {\n        v = Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n      } else {\n        v = Buffer.from(v);\n      }\n    } else if (AionLong.isAionLong(v)) {\n      v = AionLong.aionEncodeLong(v);\n    } else if (typeof v === 'number') {\n      if (!v) {\n        v = Buffer.from([]);\n      } else {\n        v = intToBuffer(v);\n      }\n    } else if (v === null || v === undefined) {\n      v = Buffer.from([]);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n\n  return v;\n}","map":null,"metadata":{},"sourceType":"script"}