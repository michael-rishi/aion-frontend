{"ast":null,"code":"/*\n * Copyright (c) 2017-2018 Aion foundation.\n *\n *     This file is part of the aion network project.\n *\n *     The aion network project is free software: you can redistribute it \n *     and/or modify it under the terms of the GNU General Public License \n *     as published by the Free Software Foundation, either version 3 of \n *     the License, or any later version.\n *\n *     The aion network project is distributed in the hope that it will \n *     be useful, but WITHOUT ANY WARRANTY; without even the implied \n *     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n *     See the GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with the aion network project source files.  \n *     If not, see <https://www.gnu.org/licenses/>.\n *\n * Contributors:\n *     Aion foundation.\n *     Marek Kotewicz <marek@parity.io>\n *     Fabian Vogelsteller <fabian@frozeman.de>\n */\n\"use strict\";\n\nmodule.exports = {\n  ErrorResponse: function ErrorResponse(result) {\n    var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);\n    if (result && result.error && result.error.data) message += \"...\" + result.error.data;\n    return new Error('Returned error: ' + message);\n  },\n  InvalidNumberOfParams: function InvalidNumberOfParams(got, expected, method) {\n    return new Error('Invalid number of parameters for \"' + method + '\". Got ' + got + ' expected ' + expected + '!');\n  },\n  InvalidConnection: function InvalidConnection(host) {\n    return new Error('CONNECTION ERROR: Couldn\\'t connect to node ' + host + '.');\n  },\n  InvalidProvider: function InvalidProvider() {\n    return new Error('Provider not set or invalid');\n  },\n  InvalidResponse: function InvalidResponse(result) {\n    var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n    return new Error(message);\n  },\n  ConnectionTimeout: function ConnectionTimeout(ms) {\n    return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n  },\n  InvalidInstantiation: function InvalidInstantiation(json) {\n    if (!json) return new Error('You need to instantiate using the \"new\" keyword.');else return new Error('The JSON interface of the contract is required when instantiating its object');\n  },\n  TransactionTimeout: function TransactionTimeout(amount, unit) {\n    return new Error('Transaction was not mined within ' + amount + ' ' + unit + ', please make sure your transaction was properly sent. Be aware that it might still be mined!');\n  },\n  TransactionOutOfGasError: function TransactionOutOfGasError(json) {\n    return new Error('Transaction ran out of gas. Please provide more gas:\\n' + json);\n  },\n  RevertedTransactionError: function RevertedTransactionError(json) {\n    return new Error('Transaction has been reverted by the EVM:\\n' + json);\n  },\n  ContractCodeStorageError: function ContractCodeStorageError() {\n    return new Error('The contract code couldn\\'t be stored, please ensure your contract deployed successfully.');\n  },\n  MissingCoreProperty: function MissingCoreProperty(property) {\n    return new Error('When creating a method you need to provide at least the \"' + property + '\" property.');\n  },\n  MissingContractAddress: function MissingContractAddress(contract) {\n    if (!contract) return new Error('The transaction receipt didn\\'t contain a contract address.');else return new Error('The contract address is not set for this object');\n  },\n  MissingReceiptOrBlockHash: function MissingReceiptOrBlockHash() {\n    return new Error('Receipt missing or blockHash null');\n  },\n  TxInputFormatterDataInputError: function TxInputFormatterDataInputError() {\n    return new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n  },\n  InputTransactionFormatterUndefinedFromField: function InputTransactionFormatterUndefinedFromField() {\n    return new Error('The send transactions \"from\" field must be defined!');\n  },\n  InputAddressFormatterInvalidAddress: function InputAddressFormatterInvalidAddress(address) {\n    return new Error('Provided address \"' + address + '\" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\\'t be converted.');\n  },\n  OutputTransactionReceiptFormatterInvalidReceipt: function OutputTransactionReceiptFormatterInvalidReceipt(receipt) {\n    return new Error('Received receipt is invalid: ' + receipt);\n  },\n  TxInputFormatterDataHexError: function TxInputFormatterDataHexError() {\n    return new Error('The data field must be HEX encoded data.');\n  },\n  InputZipfileBase64FormatterInvalidArray: function InputZipfileBase64FormatterInvalidArray() {\n    return new Error('This must be a list of .sol filepaths');\n  },\n  InputZipfileBase64FormatterInvalidContract: function InputZipfileBase64FormatterInvalidContract() {\n    return new Error('One of the provided filepaths does not include a valid .sol file');\n  },\n  FailedSubscription: function FailedSubscription(err) {\n    return new Error('Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.\\n' + err);\n  },\n  NoSubscriptionSupport: function NoSubscriptionSupport(name) {\n    return new Error('The provider doesn\\'t support subscriptions: ' + name);\n  },\n  UnspecificedJSONRPCParams: function UnspecificedJSONRPCParams(params) {\n    return new Error('JSONRPC method should be specified for params: \"' + params + '\"!');\n  },\n  SubscriptionAlreadyInstantiated: function SubscriptionAlreadyInstantiated() {\n    return new Error('Only a callback is allowed as parameter on an already instantiated subscription.');\n  },\n  UnexpectedParam: function UnexpectedParam(param, pos, obj) {\n    return new Error('Unexpected character \"' + param + '\" at position ' + pos + ' in \"' + obj + '\"');\n  },\n  InvalidEvent: function InvalidEvent(event) {\n    return new Error('Invalid Event: ' + event);\n  },\n  InvalidSignature: function InvalidSignature(flag) {\n    if (flag == null) return new Error('Invalid Signature');else return new Error('Failed to verify signature');\n  },\n  InvalidIdentifier: function InvalidIdentifier(identifier) {\n    return new Error('Invalid Identifer: \"' + identifier + '\"');\n  },\n  InvalidBitLength: function InvalidBitLength(bit) {\n    return new Error('Invalid ' + bit + ' bit length');\n  },\n  InvalidBytesLength: function InvalidBytesLength() {\n    return new Error('Invalid bytes');\n  },\n  UnexpectedEOF: function UnexpectedEOF() {\n    return new Error('Unexpected EoF');\n  },\n  UnexpectedTokens: function UnexpectedTokens() {\n    return new Error('Unexpected Tokens');\n  },\n  UnknownFragment: function UnknownFragment() {\n    return new Error('Unknown Fragmenet');\n  },\n  InvalidCoderValue: function InvalidCoderValue(value) {\n    return new Error('Invalid ' + value + '-value');\n  },\n  InsufficientData: function InsufficientData(value) {\n    return new Error('Insufficient data for ' + name + ' type');\n  },\n  ExcessiveBytes: function ExcessiveBytes(field) {\n    return new Error(field + ' count is too large');\n  },\n  LengthMismatch: function LengthMismatch(param) {\n    return new Error(param + ' length mismatch');\n  },\n  InvalidType: function InvalidType() {\n    return new Error('Invalid type');\n  },\n  UnbalancedParenthesis: function UnbalancedParenthesis() {\n    return new Error('Unbalanced Parenthesis');\n  },\n  CannotCoderUtilsError: function CannotCoderUtilsError(task) {\n    return new Error('Cannot ' + task);\n  },\n  InvalidParamForMethod: function InvalidParamForMethod(method, param, value) {\n    if (param != null && value != null) return new Error(param + ' ' + value + ' is not valid for the method \"' + method + '\"');else return new Error('Unsupported parameters for ' + method);\n  },\n  InvalidObject: function InvalidObject(obj) {\n    return new Error('Invalid ' + obj + ' object');\n  },\n  MissingProperty: function MissingProperty(property) {\n    return new Error('Missing ' + property);\n  },\n  LowerThanZeroError: function LowerThanZeroError(param) {\n    return new Error(param + ' is lower than zero (0)');\n  },\n  FailureToFetch: function FailureToFetch(values, args) {\n    return new Error('One or more of the value(s): ' + values + ' could not be fetched: ' + args);\n  },\n  InvalidParam: function InvalidParam(param) {\n    return new Error('Invalid ' + password);\n  },\n  InvalidObjVersion: function InvalidObjVersion(version, obj) {\n    return new Error('Invalid ' + version + ' ' + obj);\n  },\n  UnsupportedParam: function UnsupportedParam(comment) {\n    return new Error('Unsupported ' + comment);\n  },\n  FailedKeyDerivation: function FailedKeyDerivation() {\n    return new Error('Key derivation failed - possibly wrong password');\n  },\n  FailedAccountDecryption: function FailedAccountDecryption() {\n    return new Error('Account decryption failed - possibly wrong password');\n  },\n  ReservedEventName: function ReservedEventName(event) {\n    return new Error('The event \"' + event + '\" is a reserved event name');\n  },\n  ArgumentsMismatch: function ArgumentsMismatch(amount) {\n    return new Error('The number of arguments is not matching the methods required number. You need to pass ' + amount + ' arguments.');\n  },\n  InvalidContractMethod: function InvalidContractMethod(method) {\n    if (!method) return new Error('Couldn\\'t find a matching contract method, or the number of parameters is wrong.');else return new Error('Cannot find a contract method by the name \"' + method + '\"');\n  },\n  NoFieldSpecified: function NoFieldSpecified(field) {\n    return new Error('No \"' + field + '\" specified in neither the given options, nor the default options.');\n  },\n  EventDoesNotExist: function EventDoesNotExist(name) {\n    return new Error('Event \"' + name + '\" doesn\\'t exist in this contract.');\n  },\n  InvalidCallback: function InvalidCallback(method, pos) {\n    return new Error('The method \"' + method + '\" requires a callback as its ' + pos + ' parameter');\n  },\n  NonPayableMethodOrConstructor: function NonPayableMethodOrConstructor() {\n    return new Error('Can not send value to non-payable contract method or constructor');\n  },\n  ClosedConnection: function ClosedConnection() {\n    return new Error('Connection is closed');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}